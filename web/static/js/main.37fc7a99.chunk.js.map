{"version":3,"sources":["modules/UpLoadModule/index.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","View","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cookies","state","fileName","fileSize","fileNameStoreAsGithub","repo","get","token","hasToken","apiRes","showFailMsg","handleSubmit","bind","assertThisInitialized","fileInput","React","createRef","handleImageChange","commitToGithub","tokenInputOnchange","deleteToken","comfirmToken","repoInputOnchange","e","preventDefault","date","Date","days","result","setDate","getDate","addDays","set","path","expires","setState","remove","console","log","target","value","_this2","reader","FileReader","file","current","files","String","name","nowTime","getTime","fileType","substring","lastIndexOf","stringHash","onloadend","base64File","indexOf","then","readAsDataURL","fileEncodeWithBase64","_this$state","self","method","url","headers","Authorization","data","message","committer","email","content","response","catch","error","_this$fileInput$curre","_this$fileInput$curre2","_this$fileInput$curre3","size","_this3","_this$state2","_apiRes$download_url","download_url","_apiRes$html_url","html_url","_apiRes$git_url","git_url","react_default","a","createElement","id","onSubmit","type","onChange","className","onClick","ref","disabled","Component","withCookies","modules_UpLoadModule","App","pages","Boolean","window","location","hostname","match","ReactDOM","render","es6","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37fc7a99.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport stringHash from \"string-hash\";\r\nimport { withCookies, Cookies } from 'react-cookie';\r\nimport './index.css'\r\nconst axios = require('axios');\r\n\r\n\r\nclass View extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tconst { cookies } = props;\r\n\t\tthis.state = {\r\n\t\t\tfileName: null,\r\n\t\t\tfileSize: null,\r\n\t\t\tfileNameStoreAsGithub: null,\r\n\t\t\trepo: cookies.get('repo') || '',\r\n\t\t\ttoken: cookies.get('token') || '',\r\n\t\t\thasToken: cookies.get('token') ? true : false,\r\n\t\t\tapiRes: {},\r\n\t\t\tshowFailMsg: false\r\n\t\t}\r\n\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t\tthis.fileInput = React.createRef();\r\n\t\tthis.handleImageChange = this.handleImageChange.bind(this);\r\n\t\tthis.commitToGithub = this.commitToGithub.bind(this);\r\n\t\tthis.tokenInputOnchange = this.tokenInputOnchange.bind(this);\r\n\t\tthis.deleteToken = this.deleteToken.bind(this);\r\n\t\tthis.comfirmToken = this.comfirmToken.bind(this);\r\n\t\tthis.repoInputOnchange = this.repoInputOnchange.bind(this);\r\n\t}\r\n\r\n\tcomfirmToken(e) {\r\n\t\te.preventDefault();\r\n\t\tlet { token } = this.state\r\n\t\tif (token !== '') {\r\n\t\t\tconst { cookies } = this.props;\r\n\t\t\t//\r\n\t\t\tfunction addDays(date, days) {\r\n\t\t\t\tvar result = new Date(date);\r\n\t\t\t\tresult.setDate(result.getDate() + days);\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\tvar date = new Date();\r\n\t\t\tdate = addDays(date, 10000)\r\n\r\n\t\t\tcookies.set('token', token, {\r\n\t\t\t\tpath: '/',\r\n\t\t\t\texpires: date\r\n\t\t\t});\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\thasToken: true\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tdeleteToken(e) {\r\n\t\te.preventDefault();\r\n\t\tconst { cookies } = this.props;\r\n\t\tthis.setState({\r\n\t\t\ttoken: ''\r\n\t\t})\r\n\t\tcookies.remove('token')\r\n\t\tthis.setState({\r\n\t\t\thasToken: false\r\n\t\t})\r\n\t}\r\n\r\n\trepoInputOnchange(e) {\r\n\t\tconsole.log(e.target.value)\r\n\t\tthis.setState({\r\n\t\t\trepo: e.target.value\r\n\t\t})\r\n\r\n\t\t//\r\n\t\tfunction addDays(date, days) {\r\n\t\t\tvar result = new Date(date);\r\n\t\t\tresult.setDate(result.getDate() + days);\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\tvar date = new Date();\r\n\t\tdate = addDays(date, 10000)\r\n\r\n\t\tconst { cookies } = this.props\r\n\t\tcookies.set('repo', e.target.value, {\r\n\t\t\tpath: '/',\r\n\t\t\texpires: date\r\n\t\t});\r\n\t}\r\n\r\n\ttokenInputOnchange(e) {\r\n\t\tconsole.log(e.target.value)\r\n\t\tthis.setState({\r\n\t\t\ttoken: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandleSubmit(e) {\r\n\t\te.preventDefault();\r\n\t\t// console.log(this.fileInput.current.files[0])\r\n\t\tlet reader = new FileReader();\r\n\t\tlet file = this.fileInput.current.files[0];\r\n\t\tlet fileName = String(this.fileInput.current.files[0].name);\r\n\t\tlet nowTime = new Date().getTime();\r\n\t\tlet fileType = fileName.substring(fileName.lastIndexOf('.'));\r\n\t\tlet fileNameStoreAsGithub = stringHash(String(nowTime) + String(fileName)) + fileType;\r\n\r\n\t\t//\r\n\t\treader.onloadend = () => {\r\n\t\t\tconsole.log(reader.result)\r\n\t\t\tlet base64File = reader.result\r\n\t\t\tbase64File = base64File.substring(base64File.indexOf(',') + 1) //remove no use string fragment\r\n\t\t\tconsole.log(base64File)\r\n\t\t\tthis.commitToGithub(base64File, fileNameStoreAsGithub)\r\n\t\t\t\t.then(() => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tfileNameStoreAsGithub\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t}\r\n\r\n\t\t//\r\n\t\treader.readAsDataURL(file);\r\n\r\n\t}\r\n\r\n\tcommitToGithub(fileEncodeWithBase64, fileName) {\r\n\t\tlet file = String(fileEncodeWithBase64);\r\n\t\tlet { token, repo } = this.state\r\n\t\tlet self = this;\r\n\t\tconsole.log(file)\r\n\t\treturn axios(\r\n\t\t\t{\r\n\t\t\t\tmethod: 'PUT',\r\n\t\t\t\turl: 'https://api.github.com/repos/p208p2002/' + repo + '/contents/drive/' + fileName,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: 'token ' + token\r\n\t\t\t\t},\r\n\t\t\t\tdata: {\r\n\t\t\t\t\t\"message\": \"my commit message\",\r\n\t\t\t\t\t\"committer\": {\r\n\t\t\t\t\t\t\"name\": \"Scott Chacon\",\r\n\t\t\t\t\t\t\"email\": \"schacon@gmail.com\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"content\": file\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t.then(function (response) {\r\n\t\t\t\tconsole.log(response.data.content)\r\n\t\t\t\tself.setState({\r\n\t\t\t\t\tapiRes: response.data.content\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\t// handle error\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tself.setState({\r\n\t\t\t\t\tshowFailMsg: true\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\thandleImageChange(e) {\r\n\t\te.preventDefault();\r\n\t\tconsole.log(this.fileInput.current.files[0])\r\n\t\tlet { name = null, size = null } = this.fileInput.current.files[0]\r\n\t\tthis.setState({\r\n\t\t\tfileName: name,\r\n\t\t\tfileSize: size\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet { fileSize, fileName,\r\n\t\t\tfileNameStoreAsGithub, token, hasToken,\r\n\t\t\tapiRes, showFailMsg, repo\r\n\t\t} = this.state;\r\n\t\tlet { download_url = '', html_url = '', git_url = '' } = apiRes\r\n\t\tconsole.log(download_url)\r\n\t\treturn (\r\n\t\t\t<div id=\"Upload\">\r\n\t\t\t\t<form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tToken:\r\n\t\t\t\t\t\t{hasToken ?\r\n\t\t\t\t\t\t\t<span><b>{token.substring(0, 5) + '***...'}</b></span>\r\n\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tonChange={e => this.tokenInputOnchange(e)}\r\n\t\t\t\t\t\t\t\tvalue={token}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t{hasToken ?\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn-danger btn-sm token-btn\"\r\n\t\t\t\t\t\t\tonClick={e => this.deleteToken(e)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tdelete token\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t:\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\tclassName=\"btn-success btn-sm\"\r\n\t\t\t\t\t\t\tonClick={e => this.comfirmToken(e)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tconfirm token\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tTarget Repo:\r\n\t\t\t\t\t\t<input type=\"text\" value={repo} onChange={this.repoInputOnchange} />\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<label>\r\n\t\t\t\t\t\tUpload file:\r\n            <input\r\n\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\tref={this.fileInput}\r\n\t\t\t\t\t\t\tonChange={e => this.handleImageChange(e)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\tdisabled={fileName !== null && hasToken === true && repo !== '' ? false : true}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSubmit\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t{showFailMsg ? <small className='text-danger'>upload fail,check token of file</small> : null}\r\n\r\n\t\t\t\t</form>\r\n\t\t\t\tFile name:{fileName}\r\n\t\t\t\t<br />\r\n\t\t\t\tFile size:{fileSize / 1024}KB\r\n\t\t\t\t<br />\r\n\t\t\t\t{fileNameStoreAsGithub}\r\n\t\t\t\t<hr />\r\n\t\t\t\t<label>\r\n\t\t\t\t\tDownload URL(direct link):\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<input type=\"text\" value={download_url} />\r\n\t\t\t\t</label>\r\n\t\t\t\t<br />\r\n\t\t\t\t<label>\r\n\t\t\t\t\tGIT URL:\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<input type=\"text\" value={git_url} />\r\n\t\t\t\t</label>\r\n\t\t\t\t<br />\r\n\t\t\t\t<label>\r\n\t\t\t\t\tHTML URL:\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t<input type=\"text\" value={html_url} />\r\n\t\t\t\t</label>\r\n\t\t\t\t{/* https://raw.githubusercontent.com/p208p2002/git_practice/master/346419349.py */}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withCookies(View);","import React, { Component } from 'react'\r\nimport UpLoad from '../modules/UpLoadModule/index'\r\nclass View extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <UpLoad/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default View;","import React, { Component } from 'react';\nimport './App.css';\nimport Index from './pages/index'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Index/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'Src/asset/css/bootstrap.min.css';\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n    <CookiesProvider>\n        <App />\n    </CookiesProvider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}